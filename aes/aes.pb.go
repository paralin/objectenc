// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/objectenc/aes/aes.proto

/*
Package aes is a generated protocol buffer package.

It is generated from these files:
	github.com/aperturerobotics/objectenc/aes/aes.proto

It has these top-level messages:
	AESMetadata
*/
package aes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// KeySize is the AES key size.
type KeySize int32

const (
	KeySize_KeySize_AES256 KeySize = 0
	KeySize_KeySize_AES192 KeySize = 1
	KeySize_KeySize_AES128 KeySize = 2
)

var KeySize_name = map[int32]string{
	0: "KeySize_AES256",
	1: "KeySize_AES192",
	2: "KeySize_AES128",
}
var KeySize_value = map[string]int32{
	"KeySize_AES256": 0,
	"KeySize_AES192": 1,
	"KeySize_AES128": 2,
}

func (x KeySize) String() string {
	return proto.EnumName(KeySize_name, int32(x))
}
func (KeySize) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// AESMetadata is the AES encryption metadata.
type AESMetadata struct {
	// KeySize is the AES key size.
	KeySize KeySize `protobuf:"varint,1,opt,name=key_size,json=keySize,enum=aes.KeySize" json:"key_size,omitempty"`
	// KeyHash is the multihash of the key.
	KeyHash []byte `protobuf:"bytes,2,opt,name=key_hash,json=keyHash,proto3" json:"key_hash,omitempty"`
	// KeyHashSalt is the prefixed salt on the key hash.
	KeyHashSalt []byte `protobuf:"bytes,3,opt,name=key_hash_salt,json=keyHashSalt,proto3" json:"key_hash_salt,omitempty"`
	// Iv is the encryption IV.
	// Must be 16 bytes.
	Iv []byte `protobuf:"bytes,4,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (m *AESMetadata) Reset()                    { *m = AESMetadata{} }
func (m *AESMetadata) String() string            { return proto.CompactTextString(m) }
func (*AESMetadata) ProtoMessage()               {}
func (*AESMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AESMetadata) GetKeySize() KeySize {
	if m != nil {
		return m.KeySize
	}
	return KeySize_KeySize_AES256
}

func (m *AESMetadata) GetKeyHash() []byte {
	if m != nil {
		return m.KeyHash
	}
	return nil
}

func (m *AESMetadata) GetKeyHashSalt() []byte {
	if m != nil {
		return m.KeyHashSalt
	}
	return nil
}

func (m *AESMetadata) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

func init() {
	proto.RegisterType((*AESMetadata)(nil), "aes.AESMetadata")
	proto.RegisterEnum("aes.KeySize", KeySize_name, KeySize_value)
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/objectenc/aes/aes.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4e, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2c, 0x48, 0x2d, 0x2a, 0x29, 0x2d, 0x4a, 0x2d,
	0xca, 0x4f, 0xca, 0x2f, 0xc9, 0x4c, 0x2e, 0xd6, 0xcf, 0x4f, 0xca, 0x4a, 0x4d, 0x2e, 0x49, 0xcd,
	0x4b, 0xd6, 0x4f, 0x4c, 0x2d, 0x06, 0x61, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xe6, 0xc4,
	0xd4, 0x62, 0xa5, 0x56, 0x46, 0x2e, 0x6e, 0x47, 0xd7, 0x60, 0xdf, 0xd4, 0x92, 0xc4, 0x94, 0xc4,
	0x92, 0x44, 0x21, 0x75, 0x2e, 0x8e, 0xec, 0xd4, 0xca, 0xf8, 0xe2, 0xcc, 0xaa, 0x54, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0x3e, 0x23, 0x1e, 0x3d, 0x90, 0x16, 0xef, 0xd4, 0xca, 0xe0, 0xcc, 0xaa, 0xd4,
	0x20, 0xf6, 0x6c, 0x08, 0x43, 0x48, 0x12, 0xa2, 0x30, 0x23, 0xb1, 0x38, 0x43, 0x82, 0x49, 0x81,
	0x51, 0x83, 0x07, 0x2c, 0xe5, 0x91, 0x58, 0x9c, 0x21, 0xa4, 0xc4, 0xc5, 0x0b, 0x93, 0x8a, 0x2f,
	0x4e, 0xcc, 0x29, 0x91, 0x60, 0x06, 0xcb, 0x73, 0x43, 0xe5, 0x83, 0x13, 0x73, 0x4a, 0x84, 0xf8,
	0xb8, 0x98, 0x32, 0xcb, 0x24, 0x58, 0xc0, 0x12, 0x4c, 0x99, 0x65, 0x5a, 0xae, 0x5c, 0xec, 0x50,
	0x2b, 0x84, 0x84, 0xb8, 0xf8, 0xa0, 0xcc, 0x78, 0x47, 0xd7, 0x60, 0x23, 0x53, 0x33, 0x01, 0x06,
	0x34, 0x31, 0x43, 0x4b, 0x23, 0x01, 0x46, 0x74, 0x31, 0x23, 0x0b, 0x01, 0xa6, 0x24, 0x36, 0xb0,
	0xd7, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0x7f, 0x70, 0xad, 0x11, 0x01, 0x00, 0x00,
}
